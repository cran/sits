// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "sits_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// C_dnorm
arma::mat C_dnorm(const arma::mat& mtx, const double mean, const double std);
RcppExport SEXP _sits_C_dnorm(SEXP mtxSEXP, SEXP meanSEXP, SEXP stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double >::type std(stdSEXP);
    rcpp_result_gen = Rcpp::wrap(C_dnorm(mtx, mean, std));
    return rcpp_result_gen;
END_RCPP
}
// C_bayts_calc_sub
arma::rowvec C_bayts_calc_sub(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _sits_C_bayts_calc_sub(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_bayts_calc_sub(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_bayts_calc_nf
arma::mat C_bayts_calc_nf(arma::mat& ts, const arma::mat& mean, const arma::mat& sd, const arma::uword& n_times, const arma::mat& quantile_values, const arma::vec& bwf);
RcppExport SEXP _sits_C_bayts_calc_nf(SEXP tsSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP n_timesSEXP, SEXP quantile_valuesSEXP, SEXP bwfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type n_times(n_timesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type quantile_values(quantile_valuesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bwf(bwfSEXP);
    rcpp_result_gen = Rcpp::wrap(C_bayts_calc_nf(ts, mean, sd, n_times, quantile_values, bwf));
    return rcpp_result_gen;
END_RCPP
}
// C_bayts_detect_changes
arma::mat C_bayts_detect_changes(const arma::mat& p_res, const arma::uword& start_detection, const arma::uword& end_detection, const double& threshold, const double& chi);
RcppExport SEXP _sits_C_bayts_detect_changes(SEXP p_resSEXP, SEXP start_detectionSEXP, SEXP end_detectionSEXP, SEXP thresholdSEXP, SEXP chiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type p_res(p_resSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type start_detection(start_detectionSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type end_detection(end_detectionSEXP);
    Rcpp::traits::input_parameter< const double& >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const double& >::type chi(chiSEXP);
    rcpp_result_gen = Rcpp::wrap(C_bayts_detect_changes(p_res, start_detection, end_detection, threshold, chi));
    return rcpp_result_gen;
END_RCPP
}
// weighted_probs
NumericMatrix weighted_probs(const List& data_lst, const NumericVector& weights);
RcppExport SEXP _sits_weighted_probs(SEXP data_lstSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type data_lst(data_lstSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_probs(data_lst, weights));
    return rcpp_result_gen;
END_RCPP
}
// weighted_uncert_probs
NumericMatrix weighted_uncert_probs(const List& data_lst, const List& unc_lst);
RcppExport SEXP _sits_weighted_uncert_probs(SEXP data_lstSEXP, SEXP unc_lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type data_lst(data_lstSEXP);
    Rcpp::traits::input_parameter< const List& >::type unc_lst(unc_lstSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_uncert_probs(data_lst, unc_lst));
    return rcpp_result_gen;
END_RCPP
}
// dtw_distance
double dtw_distance(const NumericMatrix& ts1, const NumericMatrix& ts2);
RcppExport SEXP _sits_dtw_distance(SEXP ts1SEXP, SEXP ts2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ts1(ts1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type ts2(ts2SEXP);
    rcpp_result_gen = Rcpp::wrap(dtw_distance(ts1, ts2));
    return rcpp_result_gen;
END_RCPP
}
// C_kernel_median
NumericVector C_kernel_median(const NumericMatrix& x, int ncols, int nrows, int band, int window_size);
RcppExport SEXP _sits_C_kernel_median(SEXP xSEXP, SEXP ncolsSEXP, SEXP nrowsSEXP, SEXP bandSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_kernel_median(x, ncols, nrows, band, window_size));
    return rcpp_result_gen;
END_RCPP
}
// C_kernel_mean
NumericVector C_kernel_mean(const NumericMatrix& x, int ncols, int nrows, int band, int window_size);
RcppExport SEXP _sits_C_kernel_mean(SEXP xSEXP, SEXP ncolsSEXP, SEXP nrowsSEXP, SEXP bandSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_kernel_mean(x, ncols, nrows, band, window_size));
    return rcpp_result_gen;
END_RCPP
}
// C_kernel_sd
NumericVector C_kernel_sd(const NumericMatrix& x, int ncols, int nrows, int band, int window_size);
RcppExport SEXP _sits_C_kernel_sd(SEXP xSEXP, SEXP ncolsSEXP, SEXP nrowsSEXP, SEXP bandSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_kernel_sd(x, ncols, nrows, band, window_size));
    return rcpp_result_gen;
END_RCPP
}
// C_kernel_min
NumericVector C_kernel_min(const NumericMatrix& x, int ncols, int nrows, int band, int window_size);
RcppExport SEXP _sits_C_kernel_min(SEXP xSEXP, SEXP ncolsSEXP, SEXP nrowsSEXP, SEXP bandSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_kernel_min(x, ncols, nrows, band, window_size));
    return rcpp_result_gen;
END_RCPP
}
// C_kernel_max
NumericVector C_kernel_max(const NumericMatrix& x, int ncols, int nrows, int band, int window_size);
RcppExport SEXP _sits_C_kernel_max(SEXP xSEXP, SEXP ncolsSEXP, SEXP nrowsSEXP, SEXP bandSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_kernel_max(x, ncols, nrows, band, window_size));
    return rcpp_result_gen;
END_RCPP
}
// C_kernel_var
NumericVector C_kernel_var(const NumericMatrix& x, int ncols, int nrows, int band, int window_size);
RcppExport SEXP _sits_C_kernel_var(SEXP xSEXP, SEXP ncolsSEXP, SEXP nrowsSEXP, SEXP bandSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_kernel_var(x, ncols, nrows, band, window_size));
    return rcpp_result_gen;
END_RCPP
}
// C_kernel_modal
NumericVector C_kernel_modal(const NumericMatrix& x, int ncols, int nrows, int band, int window_size);
RcppExport SEXP _sits_C_kernel_modal(SEXP xSEXP, SEXP ncolsSEXP, SEXP nrowsSEXP, SEXP bandSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_kernel_modal(x, ncols, nrows, band, window_size));
    return rcpp_result_gen;
END_RCPP
}
// kohonen_dtw
XPtr<DistanceFunctionPtr> kohonen_dtw();
RcppExport SEXP _sits_kohonen_dtw() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(kohonen_dtw());
    return rcpp_result_gen;
END_RCPP
}
// kohonen_euclidean
XPtr<DistanceFunctionPtr> kohonen_euclidean();
RcppExport SEXP _sits_kohonen_euclidean() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(kohonen_euclidean());
    return rcpp_result_gen;
END_RCPP
}
// kohonen_object_distances
NumericVector kohonen_object_distances(NumericMatrix data, IntegerVector numVars, IntegerMatrix numNAs, XPtr<DistanceFunctionPtr> distanceFunction, NumericVector weights);
RcppExport SEXP _sits_kohonen_object_distances(SEXP dataSEXP, SEXP numVarsSEXP, SEXP numNAsSEXP, SEXP distanceFunctionSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numVars(numVarsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type numNAs(numNAsSEXP);
    Rcpp::traits::input_parameter< XPtr<DistanceFunctionPtr> >::type distanceFunction(distanceFunctionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(kohonen_object_distances(data, numVars, numNAs, distanceFunction, weights));
    return rcpp_result_gen;
END_RCPP
}
// RcppMap
List RcppMap(NumericMatrix data, IntegerVector numVars, IntegerMatrix numNAs, NumericMatrix codes, NumericVector weights, XPtr<DistanceFunctionPtr> distanceFunction);
RcppExport SEXP _sits_RcppMap(SEXP dataSEXP, SEXP numVarsSEXP, SEXP numNAsSEXP, SEXP codesSEXP, SEXP weightsSEXP, SEXP distanceFunctionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numVars(numVarsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type numNAs(numNAsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type codes(codesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< XPtr<DistanceFunctionPtr> >::type distanceFunction(distanceFunctionSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppMap(data, numVars, numNAs, codes, weights, distanceFunction));
    return rcpp_result_gen;
END_RCPP
}
// RcppSupersom
List RcppSupersom(NumericMatrix data, NumericMatrix codes, IntegerVector numVars, NumericVector weights, XPtr<DistanceFunctionPtr> distanceFunction, IntegerMatrix numNAs, NumericMatrix neighbourhoodDistances, NumericVector alphas, NumericVector radii, int numEpochs);
RcppExport SEXP _sits_RcppSupersom(SEXP dataSEXP, SEXP codesSEXP, SEXP numVarsSEXP, SEXP weightsSEXP, SEXP distanceFunctionSEXP, SEXP numNAsSEXP, SEXP neighbourhoodDistancesSEXP, SEXP alphasSEXP, SEXP radiiSEXP, SEXP numEpochsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type codes(codesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numVars(numVarsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< XPtr<DistanceFunctionPtr> >::type distanceFunction(distanceFunctionSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type numNAs(numNAsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type neighbourhoodDistances(neighbourhoodDistancesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppSupersom(data, codes, numVars, weights, distanceFunction, numNAs, neighbourhoodDistances, alphas, radii, numEpochs));
    return rcpp_result_gen;
END_RCPP
}
// RcppBatchSupersom
List RcppBatchSupersom(NumericMatrix data, NumericMatrix codes, IntegerVector numVars, NumericVector weights, XPtr<DistanceFunctionPtr> distanceFunction, IntegerMatrix numNAs, NumericMatrix neighbourhoodDistances, NumericVector radii, int numEpochs);
RcppExport SEXP _sits_RcppBatchSupersom(SEXP dataSEXP, SEXP codesSEXP, SEXP numVarsSEXP, SEXP weightsSEXP, SEXP distanceFunctionSEXP, SEXP numNAsSEXP, SEXP neighbourhoodDistancesSEXP, SEXP radiiSEXP, SEXP numEpochsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type codes(codesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numVars(numVarsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< XPtr<DistanceFunctionPtr> >::type distanceFunction(distanceFunctionSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type numNAs(numNAsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type neighbourhoodDistances(neighbourhoodDistancesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppBatchSupersom(data, codes, numVars, weights, distanceFunction, numNAs, neighbourhoodDistances, radii, numEpochs));
    return rcpp_result_gen;
END_RCPP
}
// RcppParallelBatchSupersom
List RcppParallelBatchSupersom(NumericMatrix data, NumericMatrix codes, IntegerVector numVars, NumericVector weights, XPtr<DistanceFunctionPtr> distanceFunction, IntegerMatrix numNAs, NumericMatrix neighbourhoodDistances, NumericVector radii, int numEpochs, int numCores);
RcppExport SEXP _sits_RcppParallelBatchSupersom(SEXP dataSEXP, SEXP codesSEXP, SEXP numVarsSEXP, SEXP weightsSEXP, SEXP distanceFunctionSEXP, SEXP numNAsSEXP, SEXP neighbourhoodDistancesSEXP, SEXP radiiSEXP, SEXP numEpochsSEXP, SEXP numCoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type codes(codesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numVars(numVarsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< XPtr<DistanceFunctionPtr> >::type distanceFunction(distanceFunctionSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type numNAs(numNAsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type neighbourhoodDistances(neighbourhoodDistancesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    Rcpp::traits::input_parameter< int >::type numCores(numCoresSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppParallelBatchSupersom(data, codes, numVars, weights, distanceFunction, numNAs, neighbourhoodDistances, radii, numEpochs, numCores));
    return rcpp_result_gen;
END_RCPP
}
// C_label_max_prob
arma::colvec C_label_max_prob(const arma::mat& x);
RcppExport SEXP _sits_C_label_max_prob(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_label_max_prob(x));
    return rcpp_result_gen;
END_RCPP
}
// linear_interp
NumericMatrix linear_interp(NumericMatrix& mtx);
RcppExport SEXP _sits_linear_interp(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_interp(mtx));
    return rcpp_result_gen;
END_RCPP
}
// linear_interp_vec
NumericVector linear_interp_vec(NumericVector& vec);
RcppExport SEXP _sits_linear_interp_vec(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_interp_vec(vec));
    return rcpp_result_gen;
END_RCPP
}
// C_mask_na
LogicalVector C_mask_na(const NumericMatrix& x);
RcppExport SEXP _sits_C_mask_na(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_mask_na(x));
    return rcpp_result_gen;
END_RCPP
}
// C_fill_na
NumericMatrix C_fill_na(const NumericMatrix& x, double fill);
RcppExport SEXP _sits_C_fill_na(SEXP xSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(C_fill_na(x, fill));
    return rcpp_result_gen;
END_RCPP
}
// batch_calc
arma::mat batch_calc(const int& n_pixels, const int& max_lines_per_batch);
RcppExport SEXP _sits_batch_calc(SEXP n_pixelsSEXP, SEXP max_lines_per_batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n_pixels(n_pixelsSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_lines_per_batch(max_lines_per_batchSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_calc(n_pixels, max_lines_per_batch));
    return rcpp_result_gen;
END_RCPP
}
// C_nnls_solver_batch
arma::mat C_nnls_solver_batch(const arma::mat& x, const arma::mat& em, const bool rmse, const int max_it, const float tol);
RcppExport SEXP _sits_C_nnls_solver_batch(SEXP xSEXP, SEXP emSEXP, SEXP rmseSEXP, SEXP max_itSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type em(emSEXP);
    Rcpp::traits::input_parameter< const bool >::type rmse(rmseSEXP);
    Rcpp::traits::input_parameter< const int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< const float >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(C_nnls_solver_batch(x, em, rmse, max_it, tol));
    return rcpp_result_gen;
END_RCPP
}
// C_normalize_data
arma::mat C_normalize_data(const arma::mat& data, const arma::rowvec& min, const arma::rowvec& max);
RcppExport SEXP _sits_C_normalize_data(SEXP dataSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_normalize_data(data, min, max));
    return rcpp_result_gen;
END_RCPP
}
// C_normalize_data_0
NumericMatrix C_normalize_data_0(const NumericMatrix& data, const double& min, const double& max);
RcppExport SEXP _sits_C_normalize_data_0(SEXP dataSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_normalize_data_0(data, min, max));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_max
arma::vec C_temp_max(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_max(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_max(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_min
arma::vec C_temp_min(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_min(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_min(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_mean
arma::vec C_temp_mean(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_mean(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_mean(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_median
arma::vec C_temp_median(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_median(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_median(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_sum
arma::vec C_temp_sum(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_sum(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_sum(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_std
arma::vec C_temp_std(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_std(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_std(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_skew
arma::vec C_temp_skew(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_skew(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_skew(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_kurt
arma::vec C_temp_kurt(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_kurt(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_kurt(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_amplitude
arma::vec C_temp_amplitude(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_amplitude(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_amplitude(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_fslope
arma::vec C_temp_fslope(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_fslope(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_fslope(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_abs_sum
arma::vec C_temp_abs_sum(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_abs_sum(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_abs_sum(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_amd
arma::vec C_temp_amd(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_amd(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_amd(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_mse
arma::vec C_temp_mse(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_mse(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_mse(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_fqr
arma::vec C_temp_fqr(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_fqr(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_fqr(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_tqr
arma::vec C_temp_tqr(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_tqr(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_tqr(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_temp_iqr
arma::vec C_temp_iqr(const arma::mat& mtx);
RcppExport SEXP _sits_C_temp_iqr(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(C_temp_iqr(mtx));
    return rcpp_result_gen;
END_RCPP
}
// C_max_sampling
DataFrame C_max_sampling(const NumericVector& x, int nrows, int ncols, int window_size);
RcppExport SEXP _sits_C_max_sampling(SEXP xSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_max_sampling(x, nrows, ncols, window_size));
    return rcpp_result_gen;
END_RCPP
}
// bayes_var
arma::mat bayes_var(const arma::mat& m, const arma::uword m_nrow, const arma::uword m_ncol, const arma::mat& w, const double neigh_fraction);
RcppExport SEXP _sits_bayes_var(SEXP mSEXP, SEXP m_nrowSEXP, SEXP m_ncolSEXP, SEXP wSEXP, SEXP neigh_fractionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type m_nrow(m_nrowSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type m_ncol(m_ncolSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type neigh_fraction(neigh_fractionSEXP);
    rcpp_result_gen = Rcpp::wrap(bayes_var(m, m_nrow, m_ncol, w, neigh_fraction));
    return rcpp_result_gen;
END_RCPP
}
// bayes_smoother_fraction
NumericVector bayes_smoother_fraction(const NumericMatrix& logits, const int& nrows, const int& ncols, const int& window_size, const NumericVector& smoothness, const double& neigh_fraction);
RcppExport SEXP _sits_bayes_smoother_fraction(SEXP logitsSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP window_sizeSEXP, SEXP smoothnessSEXP, SEXP neigh_fractionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type logits(logitsSEXP);
    Rcpp::traits::input_parameter< const int& >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< const int& >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type smoothness(smoothnessSEXP);
    Rcpp::traits::input_parameter< const double& >::type neigh_fraction(neigh_fractionSEXP);
    rcpp_result_gen = Rcpp::wrap(bayes_smoother_fraction(logits, nrows, ncols, window_size, smoothness, neigh_fraction));
    return rcpp_result_gen;
END_RCPP
}
// smooth_sg
arma::vec smooth_sg(const arma::vec& data, const arma::mat& f_res, const int& p, const int& n);
RcppExport SEXP _sits_smooth_sg(SEXP dataSEXP, SEXP f_resSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type f_res(f_resSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_sg(data, f_res, p, n));
    return rcpp_result_gen;
END_RCPP
}
// smooth_sg_mtx
arma::mat smooth_sg_mtx(const arma::mat& data, const arma::mat& f_res, const int& p, const int& n);
RcppExport SEXP _sits_smooth_sg_mtx(SEXP dataSEXP, SEXP f_resSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type f_res(f_resSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_sg_mtx(data, f_res, p, n));
    return rcpp_result_gen;
END_RCPP
}
// smooth_whit
NumericVector smooth_whit(const NumericVector& data, const double& lambda, const int& length);
RcppExport SEXP _sits_smooth_whit(SEXP dataSEXP, SEXP lambdaSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_whit(data, lambda, length));
    return rcpp_result_gen;
END_RCPP
}
// smooth_whit_mtx
NumericMatrix smooth_whit_mtx(const NumericMatrix& data, const double& lambda, const int& length);
RcppExport SEXP _sits_smooth_whit_mtx(SEXP dataSEXP, SEXP lambdaSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_whit_mtx(data, lambda, length));
    return rcpp_result_gen;
END_RCPP
}
// softmax
NumericMatrix softmax(NumericMatrix values);
RcppExport SEXP _sits_softmax(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax(values));
    return rcpp_result_gen;
END_RCPP
}
// C_entropy_probs
arma::mat C_entropy_probs(const arma::mat& x);
RcppExport SEXP _sits_C_entropy_probs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_entropy_probs(x));
    return rcpp_result_gen;
END_RCPP
}
// C_margin_probs
arma::mat C_margin_probs(const arma::mat& x);
RcppExport SEXP _sits_C_margin_probs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_margin_probs(x));
    return rcpp_result_gen;
END_RCPP
}
// C_least_probs
arma::mat C_least_probs(const arma::mat& x);
RcppExport SEXP _sits_C_least_probs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_least_probs(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sits_C_dnorm", (DL_FUNC) &_sits_C_dnorm, 3},
    {"_sits_C_bayts_calc_sub", (DL_FUNC) &_sits_C_bayts_calc_sub, 2},
    {"_sits_C_bayts_calc_nf", (DL_FUNC) &_sits_C_bayts_calc_nf, 6},
    {"_sits_C_bayts_detect_changes", (DL_FUNC) &_sits_C_bayts_detect_changes, 5},
    {"_sits_weighted_probs", (DL_FUNC) &_sits_weighted_probs, 2},
    {"_sits_weighted_uncert_probs", (DL_FUNC) &_sits_weighted_uncert_probs, 2},
    {"_sits_dtw_distance", (DL_FUNC) &_sits_dtw_distance, 2},
    {"_sits_C_kernel_median", (DL_FUNC) &_sits_C_kernel_median, 5},
    {"_sits_C_kernel_mean", (DL_FUNC) &_sits_C_kernel_mean, 5},
    {"_sits_C_kernel_sd", (DL_FUNC) &_sits_C_kernel_sd, 5},
    {"_sits_C_kernel_min", (DL_FUNC) &_sits_C_kernel_min, 5},
    {"_sits_C_kernel_max", (DL_FUNC) &_sits_C_kernel_max, 5},
    {"_sits_C_kernel_var", (DL_FUNC) &_sits_C_kernel_var, 5},
    {"_sits_C_kernel_modal", (DL_FUNC) &_sits_C_kernel_modal, 5},
    {"_sits_kohonen_dtw", (DL_FUNC) &_sits_kohonen_dtw, 0},
    {"_sits_kohonen_euclidean", (DL_FUNC) &_sits_kohonen_euclidean, 0},
    {"_sits_kohonen_object_distances", (DL_FUNC) &_sits_kohonen_object_distances, 5},
    {"_sits_RcppMap", (DL_FUNC) &_sits_RcppMap, 6},
    {"_sits_RcppSupersom", (DL_FUNC) &_sits_RcppSupersom, 10},
    {"_sits_RcppBatchSupersom", (DL_FUNC) &_sits_RcppBatchSupersom, 9},
    {"_sits_RcppParallelBatchSupersom", (DL_FUNC) &_sits_RcppParallelBatchSupersom, 10},
    {"_sits_C_label_max_prob", (DL_FUNC) &_sits_C_label_max_prob, 1},
    {"_sits_linear_interp", (DL_FUNC) &_sits_linear_interp, 1},
    {"_sits_linear_interp_vec", (DL_FUNC) &_sits_linear_interp_vec, 1},
    {"_sits_C_mask_na", (DL_FUNC) &_sits_C_mask_na, 1},
    {"_sits_C_fill_na", (DL_FUNC) &_sits_C_fill_na, 2},
    {"_sits_batch_calc", (DL_FUNC) &_sits_batch_calc, 2},
    {"_sits_C_nnls_solver_batch", (DL_FUNC) &_sits_C_nnls_solver_batch, 5},
    {"_sits_C_normalize_data", (DL_FUNC) &_sits_C_normalize_data, 3},
    {"_sits_C_normalize_data_0", (DL_FUNC) &_sits_C_normalize_data_0, 3},
    {"_sits_C_temp_max", (DL_FUNC) &_sits_C_temp_max, 1},
    {"_sits_C_temp_min", (DL_FUNC) &_sits_C_temp_min, 1},
    {"_sits_C_temp_mean", (DL_FUNC) &_sits_C_temp_mean, 1},
    {"_sits_C_temp_median", (DL_FUNC) &_sits_C_temp_median, 1},
    {"_sits_C_temp_sum", (DL_FUNC) &_sits_C_temp_sum, 1},
    {"_sits_C_temp_std", (DL_FUNC) &_sits_C_temp_std, 1},
    {"_sits_C_temp_skew", (DL_FUNC) &_sits_C_temp_skew, 1},
    {"_sits_C_temp_kurt", (DL_FUNC) &_sits_C_temp_kurt, 1},
    {"_sits_C_temp_amplitude", (DL_FUNC) &_sits_C_temp_amplitude, 1},
    {"_sits_C_temp_fslope", (DL_FUNC) &_sits_C_temp_fslope, 1},
    {"_sits_C_temp_abs_sum", (DL_FUNC) &_sits_C_temp_abs_sum, 1},
    {"_sits_C_temp_amd", (DL_FUNC) &_sits_C_temp_amd, 1},
    {"_sits_C_temp_mse", (DL_FUNC) &_sits_C_temp_mse, 1},
    {"_sits_C_temp_fqr", (DL_FUNC) &_sits_C_temp_fqr, 1},
    {"_sits_C_temp_tqr", (DL_FUNC) &_sits_C_temp_tqr, 1},
    {"_sits_C_temp_iqr", (DL_FUNC) &_sits_C_temp_iqr, 1},
    {"_sits_C_max_sampling", (DL_FUNC) &_sits_C_max_sampling, 4},
    {"_sits_bayes_var", (DL_FUNC) &_sits_bayes_var, 5},
    {"_sits_bayes_smoother_fraction", (DL_FUNC) &_sits_bayes_smoother_fraction, 6},
    {"_sits_smooth_sg", (DL_FUNC) &_sits_smooth_sg, 4},
    {"_sits_smooth_sg_mtx", (DL_FUNC) &_sits_smooth_sg_mtx, 4},
    {"_sits_smooth_whit", (DL_FUNC) &_sits_smooth_whit, 3},
    {"_sits_smooth_whit_mtx", (DL_FUNC) &_sits_smooth_whit_mtx, 3},
    {"_sits_softmax", (DL_FUNC) &_sits_softmax, 1},
    {"_sits_C_entropy_probs", (DL_FUNC) &_sits_C_entropy_probs, 1},
    {"_sits_C_margin_probs", (DL_FUNC) &_sits_C_margin_probs, 1},
    {"_sits_C_least_probs", (DL_FUNC) &_sits_C_least_probs, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_sits(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
