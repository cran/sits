% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sits_combine_predictions.R
\name{sits_combine_predictions}
\alias{sits_combine_predictions}
\alias{sits_combine_predictions.average}
\alias{sits_combine_predictions.uncertainty}
\title{Estimate ensemble prediction based on list of probs cubes}
\usage{
sits_combine_predictions(
  cubes,
  type = "average",
  ...,
  memsize = 8,
  multicores = 2,
  output_dir,
  version = "v1"
)

\method{sits_combine_predictions}{average}(
  cubes,
  type = "average",
  ...,
  weights = NULL,
  memsize = 8,
  multicores = 2,
  output_dir,
  version = "v1"
)

\method{sits_combine_predictions}{uncertainty}(
  cubes,
  type = "uncertainty",
  ...,
  uncert_cubes,
  memsize = 8,
  multicores = 2,
  output_dir,
  version = "v1"
)
}
\arguments{
\item{cubes}{List of probability data cubes.}

\item{type}{Method to measure uncertainty. See details.}

\item{...}{Parameters for specific functions.}

\item{memsize}{Maximum overall memory (in GB) to run the
function.}

\item{multicores}{Number of cores to run the function.}

\item{output_dir}{Output directory for image files.}

\item{version}{Version of resulting image.
(in the case of multiple tests)}

\item{weights}{Weights for averaging}

\item{uncert_cubes}{Uncertainty cubes to be used as local weights.}
}
\value{
A combined probability cube
}
\description{
Calculate an ensemble predictor based a list of probability
cubes. The function combines the output of two or more classifier
to derive a value which is based on weights assigned to each model.
The supported types of ensemble predictors are 'average' and
'uncertainty'.
}
\note{
Please refer to the sits documentation available in
<https://e-sensing.github.io/sitsbook/> for detailed examples.
}
\examples{
if (sits_run_examples()) {
    # create a data cube from local files
    data_dir <- system.file("extdata/raster/mod13q1", package = "sits")
    cube <- sits_cube(
        source = "BDC",
        collection = "MOD13Q1-6",
        data_dir = data_dir,
        delim = "_",
        parse_info = c("X1", "tile", "band", "date")
    )
    # create a random forest model
    rfor_model <- sits_train(samples_modis_ndvi, sits_rfor())
    # classify a data cube using rfor model
    probs_rfor_cube <- sits_classify(
        data = cube, ml_model = rfor_model, output_dir = tempdir(),
        version = "rfor"
    )
    # create an XGBoost model
    tcnn_model <- sits_train(samples_modis_ndvi, sits_tempcnn())
    # classify a data cube using tempcnn model
    probs_tcnn_cube <- sits_classify(
        data = cube, ml_model = tcnn_model, output_dir = tempdir(),
        version = "tcnn"
    )
    # create a list of predictions to be combined
    pred_cubes <- list(probs_rfor_cube, probs_tcnn_cube)
    # combine predictions
    comb_probs_cube <- sits_combine_predictions(
        pred_cubes, output_dir = tempdir()
    )
    # plot the resulting combined prediction cube
    plot(comb_probs_cube)
}
}
\author{
Gilberto Camara, \email{gilberto.camara@inpe.br}

Rolf Simoes, \email{rolf.simoes@inpe.br}
}
